import 'app_localizations.dart';

/// The translations for Russian (`ru`).
class AppLocalizationsRu extends AppLocalizations {
  AppLocalizationsRu([String locale = 'ru']) : super(locale);

  @override
  String get colorScheme => 'Цветовая схема';

  @override
  String get darkTheme => 'Тёмная';

  @override
  String get lightTheme => 'Светлая';

  @override
  String get highContrastTheme => 'Высококонтрастная';

  @override
  String get language => 'Язык';

  @override
  String get sudokuRules => 'Правила Судоку';

  @override
  String get lastRemainingCell => 'Единственная возможная клетка';

  @override
  String get lastPossibleNumber => 'Единственное возможное число';

  @override
  String get hintCanNotBeSolved => 'Данное Судоку невозможно решить с помощью известных техник решения';

  @override
  String get hintCanBeSolvedUsingSingleCell => 'Для выделенной клетки может быть применена техника: ';

  @override
  String get hintCanBeSolvedUsingMultipleCells => 'Для выделенных клеток может быть применена техника: ';

  @override
  String get nakedSingle => 'Голые единицы';

  @override
  String get nakedPair => 'Голые пары';

  @override
  String get nakedTriple => 'Голые тройки';

  @override
  String get hiddenSingle => 'Скрытые единицы';

  @override
  String get hiddenPair => 'Скрытые пары';

  @override
  String get hiddenTriple => 'Скрытые тройки';

  @override
  String get pointingPair => 'Указывающие пары';

  @override
  String get pointingTriple => 'Указывающие тройки';

  @override
  String get xwing => 'X-крыло';

  @override
  String get ywing => 'Y-крыло';

  @override
  String get swordfish => 'Рыба-меч';

  @override
  String get fillCandidates => 'Заполнить заметки';

  @override
  String get newGame => 'Новая игра';

  @override
  String get easy => 'Легкий';

  @override
  String get medium => 'Средний';

  @override
  String get hard => 'Сложный';

  @override
  String get veryHard => 'Очень сложный';

  @override
  String get menuItemGame => 'Игра';

  @override
  String get menuItemLearning => 'Обучение';

  @override
  String get menuItemSettings => 'Настройки';

  @override
  String get reset => 'Сбросить';

  @override
  String get navigationMenuOption => 'Меню навигации';

  @override
  String get textSizeOption => 'Размер текста';

  @override
  String get adaptive => 'Адаптивное';

  @override
  String get bottomNavigationBar => 'Снизу';

  @override
  String get sidebar => 'Сбоку';

  @override
  String get hint => 'Подсказка';

  @override
  String get pencilMarks => 'Заметки';

  @override
  String get basics => 'Основы';

  @override
  String get beginnerTechniques => 'Начальные техники';

  @override
  String get intermediateTechniques => 'Более сложные техники';

  @override
  String get advancedTechniques => 'Продвинутые техники';

  @override
  String get welcome => 'Добро пожаловать!';

  @override
  String get seeBasics => 'Хочешь сначала посмотреть правила Судоку?';

  @override
  String get yes => 'Да';

  @override
  String get no => 'Спасибо, я знаю правила';

  @override
  String get congratulations => 'Поздравляем';

  @override
  String get youWon => 'Судоку решено правильно';

  @override
  String get ok => 'Хорошо';

  @override
  String get techniquePurpose => 'Цель техники';

  @override
  String get techniquePurposeCellValue => 'нахождение значения клетки';

  @override
  String get techniquePurposeRemoveCandidates => 'удаление кандидатов из клеток';

  @override
  String get techniquePurposeCellValueAndRemoveCandidates => 'нахождение значения клетки и удаление кандидатов из клеток';

  @override
  String get sudokuRulesDescription1 => 'Судоку — это логическая игра, состоящая из сетки 9x9, разделенной, в свою очередь, на области или блоки 3x3, где некоторые клетки заполнены числами.';

  @override
  String get sudokuRulesDescription2 => 'Чтобы решить Судоку, надо заполнить пустые клетки цифрами.';

  @override
  String get sudokuRulesDescription3 => 'Судоку считается правильно решенным, если все клетки заполнены по правилам. \nПравила следующие: \n - все строки, столбцы и блоки должны содержать числа от 1 до 9 \n - числа не могут повторяться ни в одной строке, столбце и блоке.';

  @override
  String get sudokuRulesDescription4 => 'Строки, столбцы и блоки можно называть одним словом - группа. \nИспользуя эти правила, можно найти значения некоторых клеток. Если в группе остался только одна пустая клетка, то туда можно сразу поставить единственное число 1-9, которого нет в группе.\nНапример, в блоке ниже есть все числа, кроме 7. Поэтому в пустой квадрат можно сразу поставить 7.';

  @override
  String get solvePuzzleLearning => 'Попробуй решить задачу с помощью полученных знаний:';

  @override
  String get problemChangesLeft => 'Число клеток, которые нужно изменить: ';

  @override
  String get problemIncorrectlyChangedCells => 'Неправильно изменённых клеток: ';

  @override
  String get problemSolved => 'Задача решена правильно!';

  @override
  String get findSolutionForCell => 'Найди значение отмеченной клетки';

  @override
  String get pencilMarksDescription1 => 'Заметки используются для того, что отмечать числа, которые подходят в клетку, когда значение клетки еще неизвестно. Подходящие числа также известны как кандидаты.';

  @override
  String get pencilMarksDescription2 => 'В начале вносятся все числа, которые можно поставить в клетку, не нарушая правила. Заметки помогают отслеживать возможные значения клеток. Кроме того, многие техники решения Судоку основаны на использовании заметок.\nВ этом приложении, чтобы вводить заметки, нужно включить режим заметок. Это можно сделать, нажав кнопку с карандашом.';

  @override
  String get pencilMarksProblem => 'Заполни кандидаты в отмеченной клетке: ';

  @override
  String get lastPossibleNumberDescription1 => 'Одна из самых простых техник - это единственное возможное число, которое подходит в клетку. В клетку подходит только одно число, потому что все остальные числа не могут быть в этой клетке, так как они уже есть в группах, связанных с этой клеткой (все клетки, связанные с данной клеткой какими-либо группами, также можно назвать клетками-компаньонами данной клетки)';

  @override
  String get lastPossibleNumberDescription2 => 'На картинке можно увидеть клетку, отмеченную красным. Эта клетка может содержать только число 7, потому что все остальные числа 1-9 уже есть в группах, связанных с этим квадратом - числа 1, 3, 4 и 5 находятся в том же ряду, числа 2, 6 (а также вышеупомянутые 3 и 5) - в том же блоке, а числа 8 и 9 (и 2) - в том же столбце. Остается только число 7.';

  @override
  String get lastRemainingCellDescription1 => 'Иногда бывает так, что в блоке, строке или столбце есть несколько свободных мест, но число можно поставить только в одну клетку, потому что оно не может быть ни в одной другой клетке.';

  @override
  String get lastRemainingCellDescription2 => 'На картинке видно, что в столбце, отмеченном красным, отсутствуют несколько чисел, в том числе 6. В столбце 4 пустых места, но 6 можно разместить только в одном из них, потому что во всех в других местах она будет нарушать правила Судоку. Следовательно, число 6 находится в шестом ряду.';

  @override
  String get lastRemainingCellDescription3 => 'Существуют вариации этой техники. На картинке ниже один столбец выделен красным цветом. В этом столбце отсутствует цифра 4, и для нее есть только одно подходящее место — в пятом ряду. Свободные клетки в рядах 2 и 9 не подходят, потому что в этих блоках уже есть число 4 (выделено оранжевым цветом).';

  @override
  String get lastRemainingCellDescription4 => 'На ту же ситуацию можно посмотреть и с другой стороны — на картинке блок отмечен красным. В этом блоке нет 4, и его можно разместить только в одной клетке, потому что столбцы других свободных клеток (оранжевого цвета) уже содержат число 4 (отмечены красным).';

  @override
  String get nakedSingleDescription1 => 'Начиная с этой техники, для применения техник необходимо использовать заметки, чтобы отмечать кандидаты клеток.';

  @override
  String get nakedSingleDescription2 => 'Голые кандидаты (также могут называться очевидными) включают в себя сразу несколько техник с одними принципом и целью - удаление кандидатов из клеток.';

  @override
  String get nakedSingleDescription3 => 'Голые единицы - если клетка заполнен кандидатами и в этой клетке есть только один кандидат, то этот кандидат является значением данной клетки. Этот кандидат может быть удален из других клеток в той же строке, столбце и блоке.';

  @override
  String get nakedSingleDescription4 => 'На первой картинке можно увидеть, что в клетке, отмеченной синим, есть только один кандидат. Это означает, что другие числа не подходят в клетку, потому что это нарушило бы правила.';

  @override
  String get nakedSingleDescription5 => 'Поскольку число 2 является единственным вариантом, её можно поставить как значение клетки и удалить 2 из кандидатов клеток-компаньонов - они отмечены красным на второй картинке.';

  @override
  String get nakedPairDescription1 => 'Голая пара - если есть две клетки, которые находятся в одном столбце, строке или блоке, и у этих клеток есть только два возможных кандидата, то эти числа точно содержатся в данных клетках и ​​могут быть удалены из кандидатов других клеток.';

  @override
  String get nakedPairDescription2 => 'На первой кратинке две клетки отмечены красным — у них есть два возможных кандидата, 1 и 2. Квадраты находятся в одном блоке и в одной строке, поэтому можно применить технику голых пар. Можно точно сказать, что числа 1 и 2 содержатся в отмеченных клетках, так как они не могут содержать никаких других чисел.';

  @override
  String get nakedPairDescription3 => 'Поскольку числа не могут повторяться в группах, это позволяет удалить некоторые кандидаты, которые отмечены красным на второй картинке. Поскольку клетки, содержащие голую пару, находятся в одном блоке, кандидаты 1 и 2 могут быть удалены во всех других клетках блока. То же самое можно сделать для с клетками в 6 ряду, потому что клетки с голой парой находятся так же в одном ряду.';

  @override
  String get nakedTripleDescription1 => 'Голая тройка - принцип такой же, как и в случае с парами - если три клетки в группе содержат только три возможных кандидата, то эти числа точно находятся в данных клетках и ​​не могут быть в клетках-компаньонах данных клеток, поэтому они могут быть удалены из клеток-компаньонов.';

  @override
  String get nakedTripleDescription2 => 'На картинке показан блок, где есть клетки, содержащие голые тройки. Кандидаты в этих клетках - 2, 4, 5, они отмечены зеленым цветом. Поскольку три клетки могут содержать только эти три числа, можно утверждать что эти числа точно находятся в данных клетках. Поэтому эти числа могут быть удалены из кандидатов других клеток в блоке. В данном примере голая тройка находится в квадратах, которые связаны только с одной группой - блоком, поэтому в примере можно удалять кандидаты только внутри блока. Также стоит отметить, что не все числа должны обязательно содержаться во всех трех клетках - в примере один из квадратов содержит только числа 4 и 5.';

  @override
  String get nakedTripleDescription3 => 'Тот же принцип можно применить и к большему количеству клеток - главное, чтобы количество возможных кандидатов совпадало с количеством клеток.';

  @override
  String get hiddenSingleDescription1 => 'Скрытые единицы — если в группе есть клетка с кандидатом, которого нет ни в одной другой клетке группы, то число должно быть в этой клетке, так как это единственно возможное место.';

  @override
  String get hiddenSingleDescription2 => 'На картинке показан кандидат, отмеченный зеленым, который содержится только в одной клетке в нижнем блоке. Другие квадраты в блоке не могут содержать 9, потому что в этих столбцах уже есть 9. Так как нет других вариантов, можно утверждать, что число 9 находится в данной клетке, поэтому из этой клетки можно убрать другие кандидаты и поставить туда 9.';

  @override
  String get hiddenPairDescription1 => 'Скрытая пара похожа на скрытые единицы, но в данном случае количество чисел и клеток равно 2. Если в блоке есть две клетки с двумя кандидатами, которых нет ни в одной другой клетке, то все остальные кандидаты в этих клетках можно убрать, потому что в этих клетках находятся 2 этих числа.';

  @override
  String get hiddenPairDescription2 => 'На картинке показаны кандидаты 3 и 5, отмеченные зеленым цветом, которые содержатся только в двух клетках в данном блоке. Поскольку эти числа не могут быть в других клетках, можно утверждать, что они содержатся именно в этих клетках и все остальные кандидаты можно из этих клеток убрать. Затем скрытая пара меняется на голую пару и может дальше использоваться для удаления других кандидатов.';

  @override
  String get hiddenTripleDescription1 => 'Скрытая тройка - принцип такой же, как и со скрытой парой, только количество кандидатов и клеток равно 3. Если в блоке есть три клетки с тремя кандидатами, которые находятся только в этих клетках, то другие кандидаты можно в этих клетках убрать.';

  @override
  String get hiddenTripleDescription2 => 'На картинке показан блок с кандидатами 2, 4 и 9, отмеченными зеленым цветом в трех квадратах. Используя тот же принцип, что и для скрытой пары, можно убрать все остальные кандидаты из этих клеток.';

  @override
  String get hiddenTripleDescription3 => 'Тот же принцип работает и с большим количеством квадратов, но такие варианты встречаются редко.';

  @override
  String get pointingPairDescription1 => 'Технику указывающих пар можно использовать, если кандидат встречается дважды в одном блоке и обе клетки находятся в одной строке или столбце. Поскольку число должно содержаться в этом блоке, оно должно находиться в одном из двух заданных клеток. Следовательно, этот кандидат может быть удален из других клеток в строке/столбце.';

  @override
  String get pointingPairDescription2 => 'На картинке показаны кандидаты в одном из столбцов, отмеченные красным и зеленым цветами. Поскольку число 5 должно содержаться в верхнем блоке, а подходящих клетки всего две, оно находится в одной из этих клеток. Из этого можно сделать вывод, что число 5 не может быть в других клетках столбца, поэтому её можно убрать из квадрата в нижнем блоке.';

  @override
  String get pointingTripleDescription1 => 'Техника указывающих троек имеет тот же принцип, что и указывающие пары - если кандидат встречается в блоке три раза и все клетки с ним находятся в одной строке или столбце, то это число можно удалить из других квадратов в группе. Пример указывающей тройки можно увидеть на картинке.';
}
